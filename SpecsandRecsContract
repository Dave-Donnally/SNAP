Specifications and Requirements 
For Semantic Network Analysis Pipeline
Improvement Project

Version 2.0

Prepared by
Patricia Reilly
Dave Donnally

University of Alaska Anchorage
CSCE A470 – Computer Science and Engineering Capstone Project
Dr. Martin Cenek

4 February, 2018


SNAP Improvement Project Contract
BACKGROUND
	Semantic Network Analysis Pipeline (SNAP) is a natural language analysis program that specializes in finding the relationships between words in written documents.
	 This program works on using special language analysis toolkits such as the Natural Language Toolkit. 
	 This software is designed to tokenize words and decipher the relationships between those words in a meaningful way for a human user.
STATEMENT OF WORK
	Continuing work on this project will be separated into three distinct feature sets.

Feature enhancements:
	SNAP requires several features and enhancements to make the program run faster with multithreading of the document processing. 
	Providing relevant data on the frequency that words show up and the frequency of how often word groupings appear in the uploaded documents.
	 This frequency is an important update as it will provide information on a proper heuristic for filtering out filler words from the processed documents.
	 Additionally, there is a desire to be able to cancel the processing of documents to save time and prevent accidental results being formed.

Language Analysis Frameworks
 	The desire has been expressed to have additional language processing frameworks added to SNAP. Currently we have identified several potential candidates to be implemented. 
 	We will look at finding one that fits the needs of the project the best and implement that framework.

Various Bug fixes
SNAP has several outstanding bugs and quality of life improvements for usability that will make the program much more stable and usable. 
The known errors consist of fixing file Upload, Network frequency threshold bounds error, and the upload settings Combobox Dependency Errors. 
In addition to these errors there were several things that were identified to improve the quality of life for the user, these consisted of 
indicating file upload and file processing had been completed.
	
SNAP's features and our work plan is described in greater detail in the requirements section of the document.

Signatures 

Sponsor: ______________________________________________  Date: _________________

Sponsor: ______________________________________________  Date: _________________

Contractor: ____________________________________________  Date: _________________

Contractor: ____________________________________________  Date: _________________
Contents

1.0 Introduction	4
1.1 Purpose	4
1.2 Scope	4
1.3 Definitions, Acronyms, and Abbreviations	5
1.4 Overview	5
2.0 Project Description	5
3.0 Specifications	5
3.1 Bug Fixes/Usability Enhancements
3.2 Multithreading File Processing	6
3.3 Heuristics for Selecting Processing Parameters	6
3.4 Integrate an Additional NLP Framework	6
4.0 Requirements	6
4.1 Bug Fixes/Usability Enhancements Requirements	6
4.2 Multithreading File Processing Requirements	8
4.3 Heuristics for Selecting Processing Parameters Requirements	9
4.4 Integrate an Additional NLP Framework Requirements	9



1.0 Introduction
1.1 Purpose
The purpose of this document is to describe the requirements and specifications for the Semantic Network Analysis Pipeline (SNAP) project improvements. This document will clarify the features that will be realized by the completion of this project. The constraints, assumptions, and external dependencies of the software project will be detailed in congruence with the feature descriptions. This document is intended to be used as a reference for the agreement between the project sponsors and software contractors. 
1.2 Scope 	 
Semantic Network Analysis Pipeline (SNAP) is a web based application designed to analyze linguistics of written word and show how words and word groupings are related. Users upload a raw .txt file to undergo Natural Language Processing(NLP). User’s select the desired toolkits to perform stemming, tokenization, lemmatization, sentence splitting, parts of speech recognition, and named entity recognition. A user can then generate an undirected graph data structure file representing the network of words from the text body. This stage is called the Network Generation. The network generation file aids the application in the Network Analysis stage. During this stage, the application outputs a file that can be used in Gephi for viewing the organized body of text in a graph. Additionally, the file can be used to perform the Network Visualization stage. During the Network Visualization stage, the previously generated files are used to generate a file that can be used in Partiview for visualizing the network of words.

Currently, the SNAP application is functional. This project is intended to improve upon the current application. Improvements to SNAP include bug fixes, usability enhancements, adding an additional NLP framework, multithreading the file processing, and adding heuristics for processing parameter selection.
1.3 Definitions, Acronyms, and Abbreviations
POS: Part of Speech
SNAP: Semantic Network Analysis Pipeline
Sponsor: The Client 
Contractor: Software Developer
NLP: Natural Language Processing
2.0 Project Description
The purpose of SNAP is to analyze the linguistics of written word and show how words and word groupings are related.
  This program works on using special language analysis toolkits and is designed to tokenize words and decipher the relationships between those words in a meaningful way for a human user.
  The program uses a java back end with a website user interface using PHP as the connection between the user interface and the language processing functionality


3.0 Features
This section describes the specifications of the features of the SNAP project. 

3.1 Bug Fixes/Usability Enhancements
This feature will improve the usability of the application and fix bugs that prevent the user from completing the pipeline.  The most prominent bug is a failure when uploading a file. Due to the intermittent appearance of this bug, we believe this bug may be due to special character use and unicode characters. The next bug is the frequency bounds checkbox not disabling the parameter. The final bug is the bug seen when a user modifies a combobox on the Upload page that is not in the expected order. The combo boxes following the modified box should reset but they do not. The usability enhancements are related to improving the user’s ability to identify when a file is processing, identifying when a file is completed processing, and cancelling a file process.
3.2 Multithreading File Processing 
This feature is desired to increase the speed at which the system can process files. By multithreading the application, files can be processed simultaneously rather than sequentially. This process will only improve the processing time when the user is performing processes on multiple files. Otherwise, the application will perform the processing at the time seen currently.
3.3 Heuristics for Selecting Processing Parameters
This feature is related to selecting the parameters for processing a file during the upload/NLP and Network Generation. The first parameter will be used as a setting for the natural language process that allows the user to filter words based on POS tags. These tags allow the user to filter out common phrases and collocations based on the their category of parts of speech. The next parameter will be used as a setting for the Network Generation. This parameter feature will examine the words in the file during the upload for determine the counts to generate a histogram. The user can view the histogram and the word frequencies easily. This will aid the user when selecting upper and lower bounds for the frequency threshold setting. 
3.4 Integrate an Additional NLP Framework 
This feature will provide the user with an additional NLP framework to choose during the upload/NLP stage. The framework choices that can potentially be added are Gate, SpaCy, and OpenNLP. Ideally, each of these frameworks will be added but due to time constraints, it is unclear if this will be possible. These frameworks offer additional features that may be useful for future developers to use to improve upon our work.
4.0 Specifications and Requirements
4.1 Bug Fixes/Usability Enhancements Requirements
These requirements are related to improving current functionality and improving the usability of the website. 

REQ-1.1
Description: The application shall identify and remove all unicode and special characters from the .txt files during the Upload/NLP stage. The goal is to eliminate the upload file bug.
Assumptions: The user wants these characters to be removed.
Dependencies: None

REQ-1.2
Description: The application shall allow the user to uncheck the frequency option and not enter any number in the bound text boxes. The goal is to eliminate the bug seen when setting the Network Generation frequency threshold bounds.
Assumptions: None
Dependencies: None

REQ-1.3 
Description: The application shall reset the combo boxes after an out of order modification of a combo box response. The goal is to make sure the user updates the responses that are dependent on one another.
Assumptions: None
Dependencies: None

REQ-1.4
Description: The application shall indicate a file is processing with a spinning wheel.
Assumptions: There is an open source library that has a animated graphic like a spinning wheel.
Dependencies: None

REQ-1.5
Description: The system shall indicate file processing complete for a pipeline stage with a dialog box.
Assumptions: None
Dependencies: None

REQ-1.5.1
Description: The system shall indicate a file upload is complete and successful with a green checkmark.
Assumptions: There is an open source graphic green checkmark.
Dependencies: REQ-2.1

REQ-1.5.2
Description: The system shall indicate a file network generation is complete and successful with a green checkmark.
Assumptions:  There is an open source graphic green checkmark.
Dependencies: REQ-2.2

REQ-1.5.3
Description: The system shall indicate a file network analysis is complete and successful with a green checkmark.
Assumptions:  There is an open source graphic green checkmark.
Dependencies: REQ-2.3

REQ-1.5.4
Description: The system shall indicate a file network visualization is complete and successful with a green checkmark.
Assumptions:  There is an open source graphic green checkmark.
Dependencies: REQ 2.4

REQ-1.6
Description:The system shall provide a cancel button for each pipeline stage to cancel the current process.
Assumptions: None
Dependencies:  None

REQ-1.6.1
Description: The system shall provide a cancel button on the Upload page for cancelling the current upload/NLP process. The cancel button may be able to cancel the all the files in a multiple file batch or cancel a specific file from processing.
Assumptions: None
Dependencies: REQ-2.1

REQ-1.6.2
Description: The system shall provide a cancel button on the Network Generation page for cancelling the current network generation process.The cancel button may be able to cancel the all the files in a multiple file batch or cancel a specific file from processing. 
Assumptions: None
Dependencies: REQ-2.2

REQ-1.6.3
Description: The system shall provide a cancel button on the Network Analysis page for cancelling the current network analysis process. The cancel button may be able to cancel the all the files in a multiple file batch or cancel a specific file from processing. 
Assumptions:
Dependencies: REQ-2.3

Functional Requirement 1.6.4
Description: The system shall provide a cancel button on the Upload page for cancelling the current network visualization process. The cancel button may be able to cancel the all the files in a multiple file batch or cancel a specific file from processing. 
Assumptions:
Dependencies: REQ-2.4

REQ-1.7
Description: The system shall download a batch of files after compressing the files into a zip file.
Assumptions:  There is a tool that is open source to compress the files.
Dependencies: None
4.2 Multithreading File Processing Requirements
These requirements are related to the effort to transition the application to a multithreaded application. This effort will improve the speed of the file processing. 

REQ-2.1
Description: The application should multithread upload/ NLP stage processing so multiple files can process more quickly.
Assumptions: The application processing functions are coded in such a way that they can be multithreaded.
Dependencies: None

REQ-2.2
Description: The application should multithread Network Generation stage processing so multiple files can process more quickly.
Assumptions: The application processing functions are coded in such a way that they can be multithreaded.
Dependencies: None

REQ-2.3: 
Description:The application should multithread Network Analysis stage processing so multiple files can process more quickly.
Assumptions: The application processing functions are coded in such a way that they can be multithreaded.
Dependencies: None

REQ-2.4
Description: The application should multithread Network Visualization stage processing so multiple files can process more quickly.
Assumptions: The application processing functions are coded in such a way that they can be multithreaded.
Dependencies: None
4.3 Heuristics for Selecting Processing Parameters Requirements
The requirements in this section are related to improving the settings available to the user to indicate parameters for the network generation process and natural language process.

REQ-3.1
Description: The application should provide a word frequency for histogram to aid the user in Network Generation settings.
Assumptions:  There is an open source tool in Python to use for graphing.
Dependencies: None

REQ-3.2
Description: The application should provide a filter setting based on parts of speech tags to eliminate from the Upload/NLP output file.
Assumptions: The current frameworks will provide sufficient tagging functionality.
Dependencies: None
4.4 Integrate an Additional NLP Framework Requirements
The requirements in this section are related to adding additional natural language processing frameworks to the application as an option for the user. 

REQ-4.1.1
Description: The application may integrate an additional NLP framework, Gate.
Assumptions: The API will work with the current code or be modified quickly enough to complete on time.
Dependencies: None

REQ-4.1.2
Description: The application may integrate an additional NLP framework, SpaCy.
Assumptions:  The API will work with the current code or be modified quickly enough to complete on time.
Dependencies: None

REQ-4.1.3
Description: The application may integrate an additional NLP framework, OpenNLP.
Assumptions: The API will work with the current code or be modified quickly enough to complete on time.
Dependencies: None


